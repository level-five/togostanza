<!DOCTYPE html>

<html>
  <head>
    <title>Organism Sampling Environment</title>
    <link rel="stylesheet" href="{{css_uri}}" />
    <meta charset="utf-8">
    <style type="text/css">
      .node rect {
        cursor: pointer;
        fill: #fff;
        stroke: #e5e5e5;
        stroke-width: 1.5px;
      }
      .node text {
        font: 16px sans-serif;
        pointer-events: none;
        fill: #45b8cc; 
        font-family:"Helvetica Neue", Helvetica, Arial, sans-serif;
      }
    </style>
    <script type="text/javascript" src="http://d3js.org/d3.v3.min.js"></scriprt>
    <script src="//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/2.2.2/bootstrap.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
    {{adjust_iframe_height_script}}
  </head>

  <body>
    <script>

      (function exec() {
        var w = 800;
        var h = 800;
        var i = 0;
        var barHeight = 30;
        var barWidth = w * .5;
        var duration = 400;
        var root;
        var root_id = "http://www.w3.org/2002/07/owl#Thing";
        var selected_id = []; 
        var row_cnt = 0;
        var min_height = 350;

        var tree = d3.layout.tree()
          .size([h, 100]);

        var diagonal = d3.svg.diagonal()
          .projection(function (d) {
          return [d.y, d.x];
        });

        var vis = d3.select("body")
          .append("svg")
          .attr("width", w)
          .attr("height", h)
          .append("g")
          .attr("transform", "translate(10,30)");

        init();

        /*
        Init
        */
        function init() {
          d3.json('./organism_habitat/resources/environment_tree?tax_id={{selected_taxonomy_id}}', function(data) {
            var selected_meo_id =[];
            data.environment_tree.forEach(function(value, index) {
              if(value.is_sampled_meo == "TRUE") {
                selected_meo_id.push(value.linage_meo_id);
              }
            });;
            selected_id = selected_meo_id;
            create_page(data.environment_tree);
           })
        }

        /*
        Create page
        */
        function create_page(data) {
          var opt = {
            "root": root_id,
            "parent": "parent_meo_id",
            "name": "name",
            "child": "linage_meo_id",
            "label": "label",
          };

          var json = sparql2tree(data, opt);
          json.x0 = 0;
          json.y0 = 0;
          update(root = json);
        }

        /*
        Convert data structure from flattened object to hierarchal object
        */
        function sparql2tree(data, opts) {
          var nameMap = d3.map(); // need to get a label of parent.
          for (var i = 0; i < data.length; i++) {
            nameMap.set(data[i][opts.child], {
              "name": data[i][opts.label]
            });
          }
          var treeMap = d3.map();

          for (var i = 0; i < data.length; i++) {
            var parent = '';
            if (data[i][opts.parent]) { //root node has no parent node.
              parent = data[i][opts.parent];
            }
            var child = data[i][opts.child];
            var label = data[i][opts.label];

            if (treeMap.has(parent)) {
              children = treeMap.get(parent);
              children.push(child);
              treeMap.set(parent, children);
            } else {
              children = [child];
              treeMap.set(parent, children);
            }
          }

          function traverse(node) {
            var list = treeMap.get(node);
            if (list) {
              var children = list.map(function (d) {
                return traverse(d);
              })
              var subtotal = d3.sum(children, function (d) {
                return d.size;
              })
              return {
                "name": nameMap.get(node).name,
                "node_id": node,
                "children": children,
                "size": subtotal
              };
            } else {
              return {
                "name": nameMap.get(node).name,
                "node_id": node,
                "size": 1
              };
            }
          }
          return traverse(opts.root);
        }

        /*
        Updates drawing
        */
        function update(source) {

          // Compute the flattened node list. TODO use d3.layout.hierarchy.
          var nodes = tree.nodes(root);

          // Compute the "layout".
          nodes.forEach(function (n, i) {
            n.x = i * barHeight;
            row_cnt++;
          });

          //Adjust svg viewport height
          d3.select("svg")
            .attr("height", Math.max(min_height, (row_cnt * barHeight + 50)));

          // Update the nodesâ€¦
          var node = vis.selectAll("g.node")
            .data(nodes, function (d) {
            return d.id || (d.id = ++i);
          });
          var nodeEnter = node.enter()
            .append("g")
            .attr("class", "node")
            .attr("transform", function (d) {
              return "translate(" + source.y0 + "," + source.x0 + ")";
            })
            .style("opacity", 1e-6);

          // Enter any new nodes at the parent's previous position.
          nodeEnter.append("rect")
            .attr("y", -barHeight / 2)
            .attr("height", barHeight)
            .attr("width", barWidth)
            .attr("rx", 2)
            .attr("ry", 1)
            .on("click", click);

          nodeEnter.append("text")
            .attr("dy", 3.5)
            .attr("dx", 10)
            .text(function (d) {
              return d.name;
            })
            .on("click", click);

          // Transition nodes to their new position.
          nodeEnter.transition()
            .duration(duration)
            .attr("transform", function (d) {
              return "translate(" + d.y + "," + d.x + ")";
            })
            .style("opacity", 1);

          node.transition()
            .duration(duration)
            .attr("transform", function (d) {
              return "translate(" + d.y + "," + d.x + ")";
            })
            .style("opacity", 1)
            .selectAll("rect")
            .style("fill", function (d) {
              if (selected_id.indexOf(d.node_id) >=0) {
                return "#fffacd";
              } else {
                return "#ffffff";
              }
            });

          // Transition exiting nodes to the parent's new position.
          node.exit()
            .transition()
            .duration(duration)
            .attr("transform", function (d) {
              return "translate(" + source.y + "," + source.x + ")";
            })
            .style("opacity", 1e-6)
            .remove();

          // Stash the old positions for transition.
          nodes.forEach(function (d) {
            d.x0 = d.x;
            d.y0 = d.y;
            row_cnt--;
          });
        }

        /*
        Toggle children on click.
        
        function click(d) {
          if (d.children) {
            d._children = d.children;
            d.children = null;
          } else {
            d.children = d._children;
            d._children = null;
          }
          update(d);
        }*/
        /*
        Link on click.
        */
        function click(d) {
          if(d.node_id.indexOf("MEO_") >= 0) {
            top.location.href = d.node_id.replace("http://purl.jp/bio/11/meo/","http://togogenome.org/environment/");
          }
        }
      })();
    </script>
    <div id="chart"></div>
  </body>
</html>

