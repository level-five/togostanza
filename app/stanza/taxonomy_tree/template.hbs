<!DOCTYPE html>
<html>

  <head>
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8">
    <style type="text/css">
      .node rect {
        cursor: pointer;
        fill: #fff;
        stroke: #e5e5e5;
        stroke-width: 1.5px;
      }
      .node text {
        font: 12px sans-serif;
        pointer-events: none;
        font-family:"Helvetica Neue", Helvetica, Arial, sans-serif;
      }
    </style>    
    <script type="text/javascript" src="http://d3js.org/d3.v3.min.js"></scriprt>
    {{adjust_iframe_height_script}}
  </head>

  <body>
    <script>

      (function exec() {
        var w = 960;
        var h = 800;
        var i = 0;
        var barHeight = 25;
        var barWidth = w * .5;
        var duration = 400;
        var root;
        var root_tax_id = "{{root_taxonomy_uri}}";
        var selected_tax_id = "{{selected_taxonomy_uri}}";
        var row_cnt = 0;

        var tree = d3.layout.tree()
          .size([h, 100]);

        var diagonal = d3.svg.diagonal()
          .projection(function (d) {
          return [d.y, d.x];
        });

        var vis = d3.select("body")
          .append("svg")
          .attr("width", w)
          .attr("height", h)
          .append("g")
          .attr("transform", "translate(10,30)");

        init();

        /*
        Init
        */
        function init() {
          d3.json('./taxonomy_tree/resources/taxonomy_tree?tax_id={{selected_taxonomy_id}}', function(data) {
            create_page(data.taxonomy_tree);
           })
        }

        /*
        Create page
        */
        function create_page(data) {
          console.log(data);
          var opt = {
            "root": root_tax_id,
            "parent": "parent",
            "name": "name",
            "child": "tax",
            "label": "tax_label",
          };

          var json = sparql2tree(data, opt);
          json.x0 = 0;
          json.y0 = 0;
          update(root = json);
        }

        /*
        Convert data structure from flattened object to hierarchal object
        */
        function sparql2tree(data, opts) {
          var nameMap = d3.map(); // need to get a label of parent.
          for (var i = 0; i < data.length; i++) {
            nameMap.set(data[i][opts.child], {
              "name": data[i][opts.label]
            });
          }
          var treeMap = d3.map();

          for (var i = 0; i < data.length; i++) {
            var parent = '';
            if (data[i][opts.parent]) { //root node has no parent node.
              parent = data[i][opts.parent];
            }
            var child = data[i][opts.child];
            var label = data[i][opts.label];

            if (treeMap.has(parent)) {
              children = treeMap.get(parent);
              children.push(child);
              treeMap.set(parent, children);
            } else {
              children = [child];
              treeMap.set(parent, children);
            }
          }

          function traverse(node) {
            var list = treeMap.get(node);
            if (list) {
              var children = list.map(function (d) {
                return traverse(d);
              })
              var subtotal = d3.sum(children, function (d) {
                return d.size;
              })
              return {
                "name": nameMap.get(node).name,
                "tax_id": node,
                "children": children,
                "size": subtotal
              };
            } else {
              return {
                "name": nameMap.get(node).name,
                "tax_id": node,
                "size": 1
              };
            }
          }
          return traverse(opts.root);
        }

        /*
        Updates drawing
        */
        function update(source) {

          // Compute the flattened node list. TODO use d3.layout.hierarchy.
          var nodes = tree.nodes(root);

          // Compute the "layout".
          nodes.forEach(function (n, i) {
            n.x = i * barHeight;
            row_cnt++;
          });

          //Adjust svg viewport height
          d3.select("svg")
            .attr("height", row_cnt * barHeight + 50); 

          // Update the nodesâ€¦
          var node = vis.selectAll("g.node")
            .data(nodes, function (d) {
            return d.id || (d.id = ++i);
          });
          var nodeEnter = node.enter()
            .append("g")
            .attr("class", "node")
            .attr("transform", function (d) {
              return "translate(" + source.y0 + "," + source.x0 + ")";
            })
            .style("opacity", 1e-6);

          // Enter any new nodes at the parent's previous position.
          nodeEnter.append("rect")
            .attr("y", -barHeight / 2)
            .attr("height", barHeight)
            .attr("width", barWidth)
            .attr("rx", 2)
            .attr("ry", 1)
            .on("click", click);

          nodeEnter.append("text")
            .attr("dy", 3.5)
            .attr("dx", 10)
            .style("fill", function (d) {
              if (d.tax_id == selected_tax_id) {
                return "white";
              } else {
                return "black";
              }
            })
            .text(function (d) {
              return d.name;
            });

          // Transition nodes to their new position.
          nodeEnter.transition()
            .duration(duration)
            .attr("transform", function (d) {
              return "translate(" + d.y + "," + d.x + ")";
            })
            .style("opacity", 1);

          node.transition()
            .duration(duration)
            .attr("transform", function (d) {
              return "translate(" + d.y + "," + d.x + ")";
            })
            .style("opacity", 1)
            .selectAll("rect")
            .style("fill", function (d) {
              if (d.tax_id == selected_tax_id) {
                return "#0081c2";
              } else {
                return "#ffffff";
              }
            });

          // Transition exiting nodes to the parent's new position.
          node.exit()
            .transition()
            .duration(duration)
            .attr("transform", function (d) {
              return "translate(" + source.y + "," + source.x + ")";
            })
            .style("opacity", 1e-6)
            .remove();

          // Stash the old positions for transition.
          nodes.forEach(function (d) {
            d.x0 = d.x;
            d.y0 = d.y;
            row_cnt--;
          });
        }

        /*
        Toggle children on click.
        */
        function click(d) {
          if (d.children) {
            d._children = d.children;
            d.children = null;
          } else {
            d.children = d._children;
            d._children = null;
          }
          update(d);
        }
      })();
    </script>
    <div id="chart"></div>
  </body>

</html>
